---
import { WorkProcessCardProps } from './WorkProcess.astro';
import '../global/GlobalStyles.astro';

type ProcessCardProps = WorkProcessCardProps & {
  cardNum: number;
  processCardsLength: number;
};

const {
  img,
  imgAlt,
  smallH,
  heading,
  texts,
  illustration,
  illustrationAlt,
  cardNum,
  processCardsLength,
} = Astro.props as ProcessCardProps;

const isCardEven = (cardNum + 1) % 2 === 0;
---

<>
  <div
    class="group relative motion-safe:duration-1000 motion-safe:opacity-0 work-process-perspective"
    data-animation="process opacity"
  >
    <div
      class={`absolute -translate-y-1/2 z-10 bg-clr-green w-12 h-12 grid place-content-center text-white rounded-full left-1/2 -translate-x-1/2`}
    >
      <p>{cardNum + 1}</p>
    </div>
    <div
      class="relative shadow-process-shadow border-clr-italic border rounded-3xl px-5 lg:px-12 py-12 overflow-x-hidden"
    >
      <div
        class={`flex justify-between items-center flex-col ${
          isCardEven ? 'lg:flex-row-reverse' : 'lg:flex-row'
        }`}
      >
        <div
          class={`flex gap-10 items-center flex-col text-center w-11/12 lg:w-2/3 ${
            isCardEven ? 'lg:text-right' : 'lg:text-left'
          } ${isCardEven ? 'lg:flex-row-reverse' : 'lg:flex-row'}`}
        >
          <img
            src={img}
            alt={imgAlt}
            class="rounded-full aspect-square w-44 lg:w-52"
            loading="lazy"
            width="208"
            height="208"
          />
          <div
            class={`flex flex-col gap-4 items-center ${
              isCardEven ? 'lg:items-end' : 'lg:items-start'
            }`}
          >
            <p class="text-sm">{smallH}</p>
            <h3 class="text-h4 font-semibold">{heading}</h3>
            <div class="bg-clr-green h-0.5 w-12 rounded"></div>
            {texts.map((text) => <p>{text}</p>)}
          </div>
        </div>
        <img
          src={illustration}
          alt={illustrationAlt}
          class="max-h-36 max-w-[15rem] process-anim mt-8 lg:mt-0"
          loading="lazy"
        />
      </div>
      <div
        class="absolute w-0 h-0.5 bottom-0 left-0 bg-clr-green ease-out duration-500 group-hover:block group-hover:w-full"
      >
      </div>
    </div>
  </div>
  <div class="relative h-28">
    <div
      class={`absolute w-px h-full bg-clr-text -translate-x-1/2 left-1/2 lg:translate-x-0 ${
        isCardEven ? 'lg:right-40 lg:left-auto' : 'lg:left-40'
      }`}
    >
    </div>
    {
      cardNum + 1 === processCardsLength && (
        <div class="absolute bottom-0 w-10 h-10 bg-clr-green rounded-full right-1/2 lg:right-40 translate-x-1/2 before:content-[''] before:absolute before:w-2/3 before:h-2/3 before:bg-clr-green before:border-8 before:border-white before:rounded-full before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2" />
      )
    }
  </div>
</>
